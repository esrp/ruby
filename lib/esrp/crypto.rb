# frozen_string_literal: true

module ESRP
  ##
  # Abstract Class: crypto engine
  #
  # Provides ciphersuites for calculating SRP values (SHA256, scrypt, HMAC f.e.).
  # May provide one ciphersuite or construct different depends on options
  # Also, different crypto providers may be implemented: OpenSSL, Libsodium etc.
  #
  class Crypto
    ##
    # Constructor:
    #
    # Params:
    # - options {Hash} engine options
    #
    def initialize(options={})
      options = self.class.default_options.merge(options)
      process_options(options)
    end

    ##
    # Abstract Public: SRP's one-way hash function
    #
    # This is very important place for compatibility:
    #
    # 1. Different hashing algoritms may be involved. SHA, SHA256,
    # SHA512, blake2, their name is Legion.
    # 2. RFC5054 assumes that values for hashing is a byte arrays of hexadecimal
    # representation. Some implementations just concatenates hexadecimal strings.
    # So, it's #H's choice which representation should be picked from ESRP::Value
    #
    # Params:
    # - values {Array(ESRP::Value)} values to be hashed
    #
    # Returns: {ESRP::Value} one-way hash function result
    #
    def H(*values)
      fail NotImplementedError
    end

    ##
    # Abstract Public: password-based key derivation function
    #
    # PBKDF2, scrypt, bcrypt, argon2 or similar are recommended,
    # but usage of just SHA(salt | password) is possible.
    #
    # Params:
    # - salt     {ESRP::Value} random generated salt (s)
    # - password {String}      plain-text password in UTF8 string or concatenated UTF8 string
    #
    # Returns: {ESRP::Value}
    #
    def password_hash(salt, password)
      fail NotImplementedError
    end

    ##
    # Abstract Public: keyed hash transform function, like HMAC
    #
    # Params:
    # - key {String|ESRP::Value}
    # - msg {String|ESRP::Value}
    #
    # Returns: {ESRP::Value}
    #
    def keyed_hash(key, msg)
      fail NotImplementedError
    end

    ##
    # Abstract Public: random string generator
    #
    # Params:
    # - bytes_length {Integer} length of desired generated bytes
    #
    # Returns: {ESRP::Value}
    #
    def random(bytes_length)
      fail NotImplementedError
    end

    ##
    # Abstract Public: constant-time string comparison
    #
    # Compare two strings avoiding timing attacks
    #
    # Params:
    # - a {String|ESRP::Value}
    # - b {String|ESRP::Value}
    #
    # Returns: {Boolean} true if strings are equal
    #
    def secure_compare(a, b)
      fail NotImplementedError
    end

  end
end
